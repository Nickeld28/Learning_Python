"""
Принципы парадигмы ООП


S.O.L.I.D. - принципы

S - Single responsibility principle  - Принцип единственной ответственности класса
    Для каждого класса должно быть определено единственное назначение.
O - Open-closed principle
    "Программные сущности ... должны быть открыты для расширения, но закрыты для модификации"
    Возможно менять внутренний механизм реализации, но нельзя менять пользовательский интерфейс,
    сохраняя принцип обратной совместимости. Все "новое" только добавляется, сохраняя все "старое".
L - Liskov substitition principle  - Подстановочный принцип Барбары Лисков
    "Объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения
    правильности выполнения программы"
    Т.е. объекты подкласса должны уметь все то же, что и объекты родительского класса.
I - Interface segregation principle
    "Множество интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс
    общего назначения". Т.е. швейцарский нож - "зло". На каждую задачу, должен быть специальный инструмент.
D - Dependency inversion principle
    "Зависимость на Абстракциях. Нет зависимости на что-то конкретное".


Агрегация
Ассоциация

"""


class Base:
    def __init__(self, x):
        self.x = x

    def show(self):
        print('Base', self.x)


class Derivative(Base):
    def __init__(self):
        super().__init__(20)  # явный вызов конструктора
        self.name = ''


a = Base(10)
b = Derivative()
a.show()
b.show()
