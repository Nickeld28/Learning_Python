"""
Работа в команде

Существует самостоятельное программирование (одиночное). Этот режим очень важен для самообучения.
Однако когда человек взаимодействует только со своим программным кодом, могут наступить социальные последствия:
- человеку сложно один на один с компьютером поддерживать свою мотивацию
- проблема с организованностью, нужна четкая самоорганизованность

Работа в команде:
- повышает мотивацию
- способствует организации над проектами

Простой случай работы в команде - это парное программирвоание.
Парное программирование - взаимодействие и разделение ответственности. В случае, если напарник покидает проект,
оставшийся человек может найти нового напарника, ввести его в детали проекта и продолжить работу на проектом с ним.

Если людей становится трое или более, требуется организовать работу по другому.

В проекте существует менеджер, человек с большой мотивацией, с навыками коммуникации и организации командной работы
Менеджер должен нанять как минимум одного программиста (DEV - разработчика - developer).
С увеличением объема работ программисту потребуется помощь и менеджер нанимает еще разработчиков в подчинение
программисту, который берет на себя роль руководителем команды разработчиков (TL - team leader).
Программисты в подчинении тимлидера могут иметь разный уровень опыта: senior, middle, junior,
каждый из которых находится в подчинении тимлидера.

Программисты могут взаимодействовать друг с другом, помогать и подучивать друг друга, при этом выполняя
отведенные им роли в разработке проекта.

Команда разработчиков может гордо заявлять что их продукт работает, но менеджер не может проверить самостоятельно.
Поэтому менеджер организует команду программистов, для тестирования программного кода, который пишут разработчкики.
Команда тестировщиков ( QA - quality assurance, testers), в которой тоже есть свой TL, у которого в подчинение есть
программисты тестировщики, которые могут быть разного опыта (senior, middle, junior).

Есть программа "gourse" которая визуализирует как развивался проект и какой вклад каждый разработчик внес в проект.

Разработка проекта ведется ипользуя GIT, там все действия разработчков документируются, они делают коммиты.
Как же документировать работу команды тестировщиков? Как определить их эффективность.
У тестировщиков должна быть электронная система, в которой они вносят ошибки. Такая система называется Bug Tracker.
Таких баг трекеров очень много разных (например, Bugzilla). В эту программу вносятся либо баги либо запрос фичи
(bug or feature request), т.е. явные ошибки или какой-то недостаток функционала. Это оформляется в баг трекере в виде
тикета (ticket, issue), которые накапливаются в системе баг трекера. Тикет имеет статус OPEN или FIXED.
В команде разработчиков периодически эти тикеты распределяютя между программистами и далее они между делом
занимаются еще и обработкой этих тикетов. После исправления бага, разработчик устанавливает тикету статус FIXED и
этот тикет должен вернуться обратно к тому тестировщику, который изначально создал этот тикет, для проверки все ли
выполнено и исправлено как должно быть. И только в результате успешной проверки тестировщиком, он устанавливает
тикету статус CLOSED и он отправляется в историю.
Система баг трекера является формальным инструментом взаимодействия команды тестировщиков и разработчиков.

Может еще быть команда технических писателей (Technical Writers), которая должна писать внутреннюю и внешнюю
документацию, подробную информацию об интерфейсах или готового програмного обеспечения. К моменту релиза,
понадобится help, manual - инструкция, документация и т.д. Программисты частично могут выполнять эту функцию,
описывая документацию при разработке, но полностью задействовать программистов под эту задачу дорого,
и тем более это будет сильно отвлекать их от разработки, что будет задерживать дату релиза программного продукта.
Условное WIKI проекта.

Еще может быть отдельный человек для разработки дизайна пользовательских интерфейсов. Этот человек может рисовать,
знать психологию, понимать с точки зрения пользователя, что удобно, а что не удобно.
Такой человек назыается UI / UX инженер. (UI - user interface, UX - user experience)

Иногда возможно кратковременное присутствие еще одного человека при разработке нового программного продукта,
необходимость в котором нужна на опреденном этапе разработки, но его работа очень дорого оплачивается.
Такой человек называется архитектор. Он сам был разработчиком, TL и имеет большой опыт разработки. Он может
грамотно спроектировать структуру будущей разработки программного продукта, основываясь на идеях менеджера проекта
и UI / UX инженера в виде UML схемы, при этом не написав ни строчки программного кода.
Его задача создать план разработки, по которому TL и разработчики будут делать будущий программный продукт.


Ветки в GIT

Ветка может быть создана для альтернативной разработки, но в итоге цель - слияение в основную ветку.
Много веток долгое время существовать не может, нужно чтобы одна из веток стала основной и все программисты
направляли свои силы в основную ветку проекта.

git branch new  # создает ветку new
git checkout new  # чтобы теперь в эту ветку перейти
git push --set-upstream origin new  # в удаленном репозитории нет еще такой ветки, поэтому нужна такая команда
git checkout master  # переключится на основную ветку
git checkout -b newbranch  # создать ветку newbranch и сразу переключится на нее
git merge new  # сделать слияние ветки new с основной
git branch  # посмотреть какие есть ветки в локальном репозитории
git branch -r  # посмотреть какие ветки есть в удаленном репозитории
git help branch  # посмотреть в хелпе команды про ветки
git branch -d -r origin/new  # удалить ветку в удаленном репозитории

срубание ветки может быть опасной, т.к. вся информация потеряется, если ветка не была слита.

Демонстрация работы Pull Request и Issue на Github

"""