"""
Структурное программирование
(Автор идеи структурного программирования Э.В. Дейкстра)

Декомпозиция - разборка программы на компоненты.
Проблема создания программы разбивается на задачи и подзадачи.
Следует грамотно подойти к вопросу декомпозиции.
Декомпозицию можно осуществлять разбивая программу на функции, объекты, модули.

Рефакторинг - способ улучшения программного кода с сохранением его функциональности.
Есть возможность использовать декомпозицию в рамках рефакторинга.
В этом случае это называется разработка "снизу вверх".

Существует и другой подход разработки - "сверху вниз".
Проектируется структура будущей программы, прописываются интерфейсы взаимодействие, но все без реализации.
К реализации можно приступать когда определена вся ахритектура проекта и описаны все интерфейсы.

Итеративная разработка
От старта проекта до ее релиза нужно осуществлять разработку небольшими шагами, чтобы программа регулярно
находилась в рабочем состоянии и это состояние можно было зафиксировать в виде коммитов GIT.
Такие состояния называются консистентными состояниями программы. В таком состоянии программа может быть
запущена и протестирована.
При внедрении новой фичи программный код ломает программу и она выходит из консистентного состояния.
Творческий порыв программиста позволяет сделать некоторый "взлет" в процессе "мечтания". Необходимо
технически правильно написать творческую идею в виде программного кода и осуществляется "приземление",
приведение программы в консистентное состояние. Коммит сделанный в процессе "мечтания" называется
broken commit, и так делать не рекомендуется. "Мечтание" - это творческий процесс придумывания идеи, а
"приземление" - это реализация идеи, технический процесс.

Концентрация внимания - самый главный ресурс программиста.
Максимальная концентрация около 45 минут, за это время нужно постараться подвести итог в работе и , сделать
коммит прежде чем уйти на перерыв или закончить работу. После перерыва можно продолжить с точки сохранения.
Знание программиста, не внесенные в программный код называется призраком. Призрак должен быть выявлен.
Все новые знания из "оперативной памяти" программиста в процессе творчества должны быть отражены
в программном коде и сохранены в виде коммита.


Делаем коммит. Сделал декомпозицию функции рисования домика. Создана функция рисования домика, как
заготовка (прототип) и задокументирован ее интерфейс.
Если добавить ее реализацию, то программа заработает.

"""


def main():
    x, y = 300, 400
    width, height = 200, 300

    draw_house(x, y, width, height)


def draw_house_foundation(x, y, width, foudation_height):
    """
    Нарисовать фундамент домика ширины width и высоты foudation_height от опорной точки (x, y),
    которая находится в середине нижней точки фундамента.
    :param x: координата x середины фундамента
    :param y: координата y низа фундамента
    :param width: полная ширина фундамента
    :param foudation_height: полная высота фундамента
    :return:
    """
    print("Типа рисую фундамент", x, y, width, foudation_height)


def draw_house_walls(x, y, wall_width, walls_height):
    print("Типа рисую стены", x, y, wall_width, walls_height)


def draw_house_roof(x, y, width, roof_heigth):
    print("Типа рисую крышу", x, y, width, roof_heigth)


def draw_house(x, y, width, height):
    """
    Функция, которая рисует домик ширины width и высоты height от опорной точки (x, y),
    которая находится в середине нижней точки фундамента.
    :param x: координата x середины домика
    :param y: координата y низа фундамента
    :param width: полная ширина домика (фундамент или вылеты крышы включены)
    :param height: полная высота домика
    :return: None
    """
    print("Типа рисую домик...", x, y, width, height)
    pass  # do nothing
    foudation_height = 0.05 * height
    walls_height = 0.5 * height
    wall_width = 0.9 * width
    roof_heigth = height - foudation_height - walls_height

    draw_house_foundation(x, y, width, foudation_height)
    draw_house_walls(x, y - foudation_height, wall_width, walls_height)
    draw_house_roof(x, y - foudation_height - walls_height, width, roof_heigth)


if __name__ == '__main__':
    main()
