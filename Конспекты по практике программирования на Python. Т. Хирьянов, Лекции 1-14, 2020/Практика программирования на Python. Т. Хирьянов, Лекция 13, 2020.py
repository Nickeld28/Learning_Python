"""
ТЕСТИРОВАНИЕ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ

Модель разработки Waterfall, есть противоположная модель разработки - Agile
Waterfall. Заказчик обращается к менеджеру проектаи с целью создание некоего программного продукта, и предоставляет
некоторое описание что оно должно делать и какие функции выполнять. Группой людей (куда могут входить программисты,
архитектор, дизайнер интерфейсов и т.д.) разрабатывается концепция проекта и создается техническое задание проекта ТЗ.
Когда оно определено, группа программистов приступает к разработке и в результате определенной работы возникает
работающая версия программного обеспечения. Группа тестировщиков занимается тестированием программы, в том числе
осуществляет проверку программного продукта на соответствие изначальному техническому заданию и выдает
итоговое заключение - Bug Report. После этого проект отправляется на доработку.
После доработки осуществляется приемка менеджером и клиентом. После этого наступает выпуск программы - Release.
Далее следует этап поддержки программного продукта, но он не бесконечный, рано или поздно наступает момент, когда ПО
устаревает (5, 10, 20, 30 лет...) и происходит съем с производства и поддержка прекращается.

Зачем нужно тестировать и отлаживать программы?

Существует для вида обратной связи:
- положительная (положительные отзывы пользователей, увеличение популярности ПО, увеличение объема продаж и т.д.)
- отрицательная (негативные отзывы пользователей, отсутствие интереса к ПО, падение объема продаж)

Существует Тестирование (quality control) - это проверка соответствия между реальным поведением программы
и ее ожидаемым поведением, на конечном наборе тестов, выбранных определенным образом.

Тестировщик дает участникам проекта по разработке ПО отрицательную обратную связь о качестве программного продукта
на самой ранней стадии, когда еще не поздно все исправить.
Обратная связь должна создаваться максимально быстро.

Обязанности тестировщика:
- находить дефекты ("баги")
- вносить описание найденного дефекта (description) в систему отслеживания ошибок (Bug tracking system)
- описывать способы воспроизведения ошибок (steps to reproduce)
    - нужно прилагать логи, скриншоты, версию ПО и т.д.
- создавать отчеты о тестировании

Дополнительные обязанности тестировщика (опционально):
- исправлять документацию к программному продукту
- анализировать и уточнять требования к программе
- создавать ПО для автоматизации процесса тестирования

Результат работы тестировщика - повышение качества программного продукта.

Аспекты качества программы:
- функциональность:
    - пригодность к использованию
    - правильность выполнения
    - поддержка стандартов
    - защищенность
- надежность:
    - низкая частота отказов
    - отказоустойчивость
    - способность к восстановлению
- практичность:
    - понятность в использовании
    - управляемость
    - привлекательность
- эффективность:
    - время отклика программы
    - объем использования ресурсов ПК
- сопровождаемость (поддержка)
- переносимость (переносить с одной платформы на другую)

Классификация тестирования по масштабу:
- молульное тестирование
    - тестирование отдельных операций, методов, функций
- интеграционное тестирование
    - проверка, что модули взаимодействуют друг с другом корректно
- системное тестирование
    - тестирование на уровне пользовательского интерфейса

Отладка программы (отладку осуществляет программист, не тестировщик)
- уяснить причину ошибки и обнаружить ее причину
- локализовать ее в исходном тексте программы
- устранить ошибку

Два пути отладки:
- использование отладчиков ("дебаггеров")
- логгирование (вывод отладочных сведений в файл)

Типичные задачи отладки:
- узнавать текущие значения переменных
- выяснять, по какому пути выполнялась программа

Модульное тестирование - Unit-testing
"""


def fib(n):
    """
    >>> fib(0)
    0
    >>> fib(1)
    1
    >>> fib(2)
    1
    >>> fib(3)
    2
    >>> fib(5)
    5
    >>> fib(10)
    234

    """
    if n < 2:
        return n
    else:
        return fib(n - 1) + fib(n - 2)


def main():
    n = int(input("Введите номер числа Фибоначчи "))
    f = fib(n)
    print("Ваше число Фибоначчи: ", f)


if __name__ == '__main__':
    import doctest

    doctest.testmod()

"""
можно так тестировать вводя вручную, но это не эффективно

Можно процесс автоматизировать, написать программу,
которая будет вводить сама значения и сравнивать с верным ответом
"""

all_correct = True
for i, answer in [(0, 0), (1, 1), (2, 1), (10, 234)]:
    result = fib(i)
    correct = (result == answer)
    if not correct:
        print('Test case failed:', i, result, "!=", answer)
    all_correct &= correct

if all_correct:
    print('Testing fib(): passed')
else:
    print('Testing fib(): failed')

"""
В документации Python, в Library reference есть две основных библиотеки для тестирования:
- doctest (разыскивает кусочки текста, который похожи на интерактивные запуски Python, а затем запускает их, чтобы
  проверить что они работают так как показано в документ строке
"""
